{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/projectsReducer.js","redux/reducers/projectInfoReducer.js","redux/reducers/developerProjectReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/projectsSaga.js","redux/sagas/projectInfoSaga.js","redux/sagas/developerProjectSaga.js","redux/sagas/deleteDeveloperProjectSaga.js","redux/sagas/editSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/HomePage/HomePage.jsx","components/SelectedProject/SelectedProject.jsx","components/UserPage/UserPage.js","components/AvailableProjects/AvailableProjects.js","components/ProjectInfo/ProjectInfo.jsx","components/Confirmation/Confirmation.jsx","components/EditProfile/EditProfile.jsx","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","projectsReducer","projectInfoReducer","developerProjectReducer","rootReducer","errors","user","projects","projectInfo","developerProject","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","projectsSaga","fetchProjects","takeEvery","projectInfoSaga","postProject","fetchProjectInfo","developerProjectSaga","fetchDeveloperProject","length","deleteDeveloperProjectSaga","deleteDeveloperProject","delete","editSaga","submitEdit","id","rootSaga","all","theme","createMuiTheme","palette","primary","orange","secondary","connect","props","ThemeProvider","className","onClick","dispatch","to","Footer","blueGrey","LoginPage","username","password","login","event","preventDefault","handleInputChangeFor","propertyName","setState","target","value","this","role","onSubmit","htmlFor","TextField","required","label","margin","onChange","autoComplete","placeholder","name","Button","variant","color","Component","RegisterPage","firstName","lastName","city","occupation","portfolioUrl","timeAvailable","languages","qualifications","email","helperText","multiline","rows","ComponentToShow","ComponentToProtect","component","otherProps","HomePage","src","alt","moment","require","red","SelectedProject","handleDelete","reduxStore","handleAvailableProjectsClick","history","push","project","organization_name","start_date","format","end_date","website","description","trigger","modal","close","withRouter","UserPage","first_name","last_name","timestamp","portfolio","time_available","AvailableProjects","handleNameClick","map","key","Link","ProjectInfo","project_id","handleYesClick","handleBackClick","Confirmation","handleDashClick","EditProfile","editProfile","propertyValue","handleEdit","handleCancel","style","width","App","exact","from","path","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.912bf583.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","\nconst projectsReducer = (state = [], action) => {\n    switch (action.type) {\n      case 'SET_PROJECTS':\n        return action.payload;\n      default:\n        return state;\n    }\n  };\n  \n  // user will be on the redux state at:\n  // state.user\n  export default projectsReducer;","\nconst projectInfoReducer = (state = 0, action) => {\n    switch (action.type) {\n      // case 'FETCH_PROJECT_INFO':\n      //   console.log(action.payload.id);\n        \n        // return action.payload;\n      case 'SET_PROJECT_INFO':\n        return action.payload;\n      default:\n        return state;\n    }\n  };\n  \n  // user will be on the redux state at:\n  // state.user\n  export default projectInfoReducer;","\nconst developerProjectReducer = (state = {}, action) => {\n    switch (action.type) {\n      case 'SET_DEVELOPER_PROJECT':\n        return action.payload;\n      case 'RESET_DEVELOPER_PROJECT':\n        return {};\n      default:\n        return state;\n    }\n  };\n  \n  export default developerProjectReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport projects from './projectsReducer';\nimport projectInfo from './projectInfoReducer'\nimport developerProject from './developerProjectReducer'\n// renaming the projectsReducer here to \"projects\" means it also needs to be \n// called projects when it gets mapped (.map) over in AvailableProjects\n// i.e. this.props.reduxStore.projects.map , otherwise, IT WON'T WORK\n\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  projects,\n  projectInfo,\n  developerProject,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n    yield put({ type: 'RESET_DEVELOPER_PROJECT' })\n    \n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeEvery } from 'redux-saga/effects';\n\nfunction* projectsSaga(){\n    yield takeEvery('FETCH_PROJECTS', fetchProjects)\n}\n\nfunction* fetchProjects(){\n    try{\n        let response = yield axios.get('/api/projects');\n        console.log(response.data);\n        yield put({ type: 'SET_PROJECTS', payload: response.data});\n    }\n    catch (error) {\n        console.log('Error getting projects', error)\n    }\n}\n\nexport default projectsSaga;\n","import axios from 'axios';\nimport { put, takeEvery } from 'redux-saga/effects';\n\nfunction* projectInfoSaga(){\n    yield takeEvery('FETCH_PROJECT_INFO', fetchProjectInfo)\n    yield takeEvery('POST_PROJECT', postProject)\n}\n\nfunction* postProject(action){\n    console.log('in postProject saga', action.payload)\n    yield axios.post(`/api/project_info`, action.payload)\n    // yield put({ type: 'FETCH_PROJECT' })\n    // put === dispatch\n}\n\nfunction* fetchProjectInfo(action){\n    try{\n        let response = yield axios.get(`/api/project_info/${action.payload}`);\n        console.log(response.data);\n    // the word \"put\" === dispatch\n        yield put({ type: 'SET_PROJECT_INFO', payload: response.data[0] });\n    }\n    catch (error) {\n        console.log('Error getting project info', error)\n    }\n}\n\nexport default projectInfoSaga;\n","import axios from 'axios';\nimport { put, takeEvery } from 'redux-saga/effects';\n\nfunction* developerProjectSaga() {\n    yield takeEvery('FETCH_DEVELOPER_PROJECT', fetchDeveloperProject)\n}\n\nfunction* fetchDeveloperProject(action) {\n    try {\n        let response = yield axios.get(`/api/developer_project`);\n        console.log(response.data);\n        if (response.data.length > 0) {\n            yield put({ type: 'SET_DEVELOPER_PROJECT', payload: response.data[0] });\n        } else{\n            yield put({ type: 'SET_DEVELOPER_PROJECT', payload: {} });\n        }\n    }\n    catch (error) {\n        console.log('Error getting developer project', error)\n    }\n}\n\nexport default developerProjectSaga;\n","import axios from 'axios';\nimport { put, takeEvery } from 'redux-saga/effects';\n\nfunction* deleteDeveloperProjectSaga() {\n    yield takeEvery('DELETE_DEVELOPER_PROJECT', deleteDeveloperProject)\n}\n\nfunction* deleteDeveloperProject(action) {\n    console.log(action.payload);\n    try {\n        let response = yield axios.delete(`/api/developer_project/${action.payload}`);\n        console.log(response.data);\n        yield put({ type: 'FETCH_DEVELOPER_PROJECT' })\n    }\n    catch (error) {\n        console.log('Error deleting developer project', error)\n    }\n}\n\nexport default deleteDeveloperProjectSaga;\n","import axios from 'axios';\nimport { put, takeEvery } from 'redux-saga/effects';\n\nfunction* editSaga() {\n    yield takeEvery('SUBMIT_EDIT', submitEdit);\n}\n\nfunction* submitEdit(action) {\n    console.log('in submit edit', action);\n    let response = yield axios.put(`/api/user/${action.payload.id}`, action.payload);\n    yield put({ type: 'FETCH_USER' });\n\n}\n\nexport default editSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport projectsSaga from './projectsSaga';\nimport projectInfoSaga from './projectInfoSaga'\nimport developerProjectSaga from './developerProjectSaga'\nimport deleteDeveloperProjectSaga from './deleteDeveloperProjectSaga'\nimport editSaga from './editSaga'\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    projectsSaga(),\n    projectInfoSaga(),\n    developerProjectSaga(),\n    deleteDeveloperProjectSaga(),\n    editSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport orange from '@material-ui/core/colors/orange'\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n    secondary: orange\n  }\n})\n\nconst LogOutButton = props => (\n  <ThemeProvider theme={theme}>\n    <button\n      className={props.className}\n    \n      // This button shows up in multiple locations and is styled differently\n      // because it's styled differently depending on where it is used, the className\n      // is passed to it from it's parents through React props\n      onClick={() => props.dispatch({ type: 'LOGOUT' })}\n    >\n      LOGOUT\n  </button>\n  </ThemeProvider>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/dashboard\">\n      <h2 className=\"nav-title\">VOLUNCODE</h2>\n    </Link>\n    <div className=\"nav-right\">\n      {/* Always show this link since the home page is not protected */}\n      <Link className=\"nav-link\" to=\"/home\">\n        HOME\n      </Link>\n      <Link className=\"nav-link\" to=\"/dashboard\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'DASHBOARD' : 'LOGIN / REGISTER'}\n      </Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/projects\">\n            AVAILABLE PROJECTS\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      \n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; 2020 Voluncode\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n    secondary: blueGrey\n  }\n})\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <div className=\"content\">\n          {this.props.errors.loginMessage && (\n            <h2\n              className=\"alert\"\n              role=\"alert\"\n            >\n              {this.props.errors.loginMessage}\n            </h2>\n          )}\n          <form className=\"loginForm\" onSubmit={this.login}>\n            <h1>Login</h1>\n            <div>\n              <label htmlFor=\"username\">\n                {/* Username: */}\n                <TextField\n                  // type=\"text\"\n                  // name=\"username\"\n                  required\n                  id=\"standard-name\"\n                  label=\"Username\"\n                  margin=\"dense\"\n                  value={this.state.username}\n                  onChange={this.handleInputChangeFor('username')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"password\">\n                {/* Password: */}\n                <TextField\n                  // type=\"password\"\n                  // name=\"password\"\n                  required\n                  id=\"standard-password-input\"\n                  label=\"Password\"\n                  type=\"password\"\n                  autoComplete=\"current-password\"\n                  margin=\"dense\"\n                  placeholder=\"Password\"\n                  value={this.state.password}\n                  onChange={this.handleInputChangeFor('password')}\n                />\n              </label>\n            </div>\n            <div>\n              <input\n                className=\"log-in\"\n                type=\"submit\"\n                name=\"submit\"\n                value=\"LOGIN\"\n              />\n            </div>\n          </form>\n          <center>\n            <Button\n              type=\"button\"\n              className=\"link-button\"\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n            >\n              Register\n          </Button>\n          </center>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n    secondary: blueGrey\n  }\n})\n\nclass RegisterPage extends Component {\n  state = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    password: '',\n    city: '',\n    state: '',\n    occupation: '',\n    portfolioUrl: '',\n    timeAvailable: '',\n    languages: '',\n    qualifications: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (\n      this.state.firstName &&\n      this.state.lastName &&\n      this.state.username &&\n      this.state.password &&\n      this.state.city &&\n      this.state.state &&\n      this.state.occupation &&\n      this.state.portfolioUrl &&\n      this.state.timeAvailable &&\n      this.state.languages &&\n      this.state.qualifications\n    ) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          firstName: this.state.firstName,\n          lastName: this.state.lastName,\n          email: this.state.email,\n          username: this.state.username,\n          password: this.state.password,\n          city: this.state.city,\n          state: this.state.state,\n          occupation: this.state.occupation,\n          portfolioUrl: this.state.portfolioUrl,\n          timeAvailable: this.state.timeAvailable,\n          languages: this.state.languages,\n          qualifications: this.state.qualifications,\n        },\n      });\n    }\n    else {\n      this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <div className=\"registrationPage content\">\n          {this.props.errors.registrationMessage && (\n            <h2\n              className=\"alert\"\n              role=\"alert\"\n            >\n              {this.props.errors.registrationMessage}\n            </h2>\n          )}\n          <form onSubmit={this.registerUser}>\n            <h1>Register User</h1>\n            <div>\n              <label htmlFor=\"firstName\">\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"First Name\"\n                  margin=\"dense\"\n                  value={this.state.firstName}\n                  onChange={this.handleInputChangeFor('firstName')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"lastName\">\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"Last Name\"\n                  margin=\"dense\"\n                  value={this.state.lastName}\n                  onChange={this.handleInputChangeFor('lastName')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"email\">\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"Email\"\n                  margin=\"dense\"\n                  value={this.state.email}\n                  onChange={this.handleInputChangeFor('email')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"username\">\n                <TextField\n                  required\n                  id=\"standard-name\"\n                  label=\"Username\"\n                  margin=\"dense\"\n                  value={this.state.username}\n                  onChange={this.handleInputChangeFor('username')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"password\">\n                <TextField\n                  required\n                  id=\"standard-password-input\"\n                  label=\"Password\"\n                  type=\"password\"\n                  autoComplete=\"current-password\"\n                  margin=\"dense\"\n                  helperText=\"Minimum of 6 characters\"\n                  value={this.state.password}\n                  onChange={this.handleInputChangeFor('password')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"city\">\n                <TextField\n                  required\n                  id=\"standard-name\"\n                  label=\"City\"\n                  margin=\"dense\"\n                  value={this.state.city}\n                  onChange={this.handleInputChangeFor('city')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"state\">\n                <TextField\n                  required\n                  id=\"standard-name\"\n                  label=\"State\"\n                  margin=\"dense\"\n                  value={this.state.state}\n                  onChange={this.handleInputChangeFor('state')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"occupation\">\n                <TextField\n                  required\n                  id=\"standard-name\"\n                  label=\"Job Title/Occupation\"\n                  margin=\"dense\"\n                  value={this.state.occupation}\n                  onChange={this.handleInputChangeFor('occupation')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"portfolioUrl\">\n                <p>Github URL or another link to your portfolio:</p>\n                <TextField\n                  required\n                  placeholder=\"i.e. github.com/name\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  value={this.state.portfolioUrl}\n                  onChange={this.handleInputChangeFor('portfolioUrl')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"timeAvailable\">\n                <p>How much time can you commit to a project?</p>\n                <TextField\n                  required\n                  multiline\n                  rows=\"4\"\n                  placeholder=\"i.e. 5 hours per week\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  value={this.state.timeAvailable}\n                  onChange={this.handleInputChangeFor('timeAvailable')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"languages\">\n                <p>List your known programming languages</p>\n                <TextField\n                  required\n                  multiline\n                  rows=\"4\"\n                  placeholder=\"List programming languages here\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  value={this.state.languages}\n                  onChange={this.handleInputChangeFor('languages')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"qualifications\">\n                <p>What qualifications do you have? Include degrees, certifications, courses, etc.</p>\n                <TextField\n                  multiline\n                  rows=\"4\"\n                  placeholder=\"List qualifications here\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  value={this.state.qualifications}\n                  onChange={this.handleInputChangeFor('qualifications')}\n                />\n              </label>\n            </div>\n            <div>\n              <input\n                className=\"register\"\n                type=\"submit\"\n                name=\"submit\"\n                value=\"REGISTER\"\n              />\n            </div>\n          </form>\n          <center>\n            <Button\n              type=\"button\"\n              className=\"link-button\"\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => { this.props.dispatch({ type: 'SET_TO_LOGIN_MODE' }) }}\n            >\n              Login\n            </Button>\n          </center>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n// *****REFERENCE GROUP PROJECT AUTH SHELF(?) FOR THIS*********\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\nclass HomePage extends Component {\n\n  render() {\n\n    return (\n      <div className=\"confirmation\">\n        <h1>WELCOME TO VOLUNCODE</h1>\n        <img src=\"/images/engineering.jpg\" alt=\"Engineers collaborating\"/>\n        <public />\n        <p>Voluncode is a platform for developers to volunteer their time to develop\n           websites or apps for Minnesota-based non-profit organizations.</p>\n      </div>\n    )\n  }\n}\n\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport Popup from \"reactjs-popup\";\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport red from '@material-ui/core/colors/red'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { withRouter } from 'react-router-dom';\nconst moment = require('moment');\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: orange,\n        secondary: red\n    }\n})\n\nclass SelectedProject extends Component {\n\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_DEVELOPER_PROJECT' })\n    }\n\n    handleDelete = () => {\n        console.log('clicked Delete!', this.props.reduxStore.developerProject.id);\n        this.props.dispatch({\n            type: 'DELETE_DEVELOPER_PROJECT',\n            payload: this.props.reduxStore.developerProject.id\n        })\n    }\n\n    handleAvailableProjectsClick = () => {\n        this.props.history.push('/projects')\n    }\n\n    render() {\n        let project = this.props.reduxStore.developerProject;\n\n        let projectInfo = (\n            <>\n                <h3> {project.organization_name} </h3>\n                <p><b> Estimated Project Timeline:</b></p>\n                <p>{moment(this.props.reduxStore.developerProject.start_date).format('LL')} - {moment(this.props.reduxStore.developerProject.end_date).format('LL')} </p>\n                <p> {this.props.reduxStore.developerProject.website} | {this.props.reduxStore.developerProject.email}</p>\n                <p> {this.props.reduxStore.developerProject.description} </p>\n                {/* <button onClick={(event) => { if (window.confirm('Are you sure you want to delete this?')) this.handleDelete(event) }}>Delete Project</button> */}\n                <Popup\n                    trigger=\n                    {\n                        <Button\n                            type=\"button\"\n                            className=\"link-button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            >\n                            Delete Project\n                        <DeleteIcon />\n                        </Button>\n                    }\n                    modal>\n                    {close => (\n                        <div className=\"popup\">\n                            {/* <a onClick={close}>&times;</a> */}\n                            <h2>Are you sure you want to delete this project?</h2>\n                            <p>This action cannot be undone.</p>\n                            <div>\n                                <Button\n                                    type=\"button\"\n                                    className=\"link-button\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => { close(); }} >\n                                    No\n                                </Button>\n                                <Button\n                                    type=\"button\"\n                                    className=\"link-button\"\n                                    variant=\"contained\"\n                                    color=\"secondary\"\n                                    onClick={(event) => {\n                                        close(this.handleDelete(event));\n                                    }}>\n                                    Yes\n                        </Button>\n                            </div>\n                        </div>\n                    )}\n                </Popup>\n            </>\n        )\n        // if(project.id && project.name)\n        return (\n            <ThemeProvider theme={theme}>\n                <div>\n                    <h2>Current Project:</h2>\n                    {/* variable to eval ? TRUTHY : FALSY */}\n                    {\n                        project.id ? projectInfo :\n                            <>\n                                <p>Select a project!</p>\n                                <Button\n                                type=\"button\"\n                                className=\"link-button\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.handleAvailableProjectsClick}\n                                >Available Projects\n                                </Button>\n                            </>\n                    }\n                    {/* {JSON.stringify(this.props.reduxStore.developerProject)} */}\n\n                </div>\n            </ThemeProvider>\n        )\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(SelectedProject));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport SelectedProject from '../SelectedProject/SelectedProject'\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nconst moment = require('moment');\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n    secondary: orange\n  }\n})\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\n\nclass UserPage extends Component {\n\n  render() {\n\n    const user = this.props.user;\n\n    return(\n      <ThemeProvider theme={theme}>\n          <div className=\"content\">\n            <h1 id=\"welcome\">\n              Welcome, {user.first_name} {user.last_name}!\n            </h1>\n            {/* <p>Your ID is: {user.id}</p> */}\n            <p><b>Member since:</b></p>\n            <p>{moment(user.timestamp).format('LL')}</p>\n            <p><b>Email:</b></p>\n            <p>{user.email}</p>\n            <p><b>Located:</b></p>\n            <p>{user.city}, {user.state}</p>\n            <p><b>Occupation:</b></p>\n            <p>{user.occupation}</p>\n            <p><b>Portfolio URL:</b></p>\n            <p>{user.portfolio}</p>\n            <p><b>Time available to volunteer:</b></p>\n            <p>{user.time_available}</p>\n            <p><b>Known programming languages:</b></p>\n            <p>{user.languages}</p>\n            <p><b>Qualifications:</b></p> <p>{user.qualifications}</p>\n            <Button\n              type=\"button\"\n              className=\"link-button\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                console.log('clicked Edit Profile');\n                this.props.history.push('/edit_profile')\n              }}>\n              Edit Profile\n          </Button>\n            <br />\n            <br />\n            <br />\n            <br />\n            <SelectedProject />\n            <br />\n            {/* <LogOutButton className=\"log-in\" /> */}\n          </div >\n        </ThemeProvider>\n      )\n    }\n  }\n\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n  state\n});\n\n// this allows us to use <App /> in index.js\nexport default withRouter(connect(mapStateToProps)(UserPage));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport Popup from \"reactjs-popup\";\nimport Link from '@material-ui/core/Link';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\nconst moment = require('moment');\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n    secondary: blueGrey\n  }\n})\n\nclass AvailableProjects extends Component {\n\n  componentDidMount() {\n    this.props.dispatch\n      ({ type: 'FETCH_PROJECTS' })\n  }\n\n  handleNameClick = (id) => {\n    console.log(id);\n    this.props.dispatch({\n      type: 'FETCH_PROJECT_INFO',\n      payload: id\n    })\n    this.props.history.push(`/project_info/${id}`);\n  }\n\n  // handleYesClick = () => {\n  //   this.props.history.push('/confirmation')\n  // }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <div className=\"content\">\n          <h1>Available Projects</h1>\n          {/* {JSON.stringify(this.props.reduxStore.projectInfo)} */}\n          {/* projects.map : the word projects connects back to the renamed reducer in reducer/index.js in the combineReducers */}\n          <ul>\n            {this.props.reduxStore.projects.map(project =>\n              <li key={project.id}>\n                <div>\n                  <Link\n                    className=\"availableProjectsHeading\"\n                    component=\"button\"\n                    color=\"primary\"\n                    onClick={() => this.handleNameClick(project.id)} ><b>\n                      {project.organization_name}\n                    </b></Link>\n                  <p>{moment(project.start_date).format('LL')} - {moment(project.end_date).format('LL')}</p>\n                  <p>{project.website} | {project.email}</p>\n                  <p>{project.description}</p>\n                </div>\n              </li>\n            )}\n          </ul>\n        </div>\n      </ThemeProvider>\n    )\n  }\n};\n\nconst mapReduxStateToProps = (reduxStore) => ({\n  reduxStore,\n  // projectInfo \n})\n\nexport default connect(mapReduxStateToProps)(AvailableProjects);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport Popup from \"reactjs-popup\";\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport red from '@material-ui/core/colors/red'\nconst moment = require('moment');\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: orange,\n    secondary: red\n  }\n})\n\nclass ProjectInfo extends Component {\n\n  state = {\n    project_id: '',\n  }\n\n\n  handleYesClick = (event) => {\n    this.props.dispatch({\n      type: 'POST_PROJECT',\n      payload: {\n        project_id: this.props.reduxStore.projectInfo.id\n      }\n    })\n    this.props.history.push('/confirmation')\n  }\n\n  handleBackClick = () => {\n    this.props.history.push('/projects')\n  }\n\n  render() {\n\n    let project = this.props.reduxStore.projectInfo;\n\n    return (\n      <ThemeProvider theme={theme}>\n\n        <div className=\"content\">\n          <h1>Project Info</h1>\n          <h3> {project.organization_name} </h3>\n          <p> {moment(project.start_date).format('LL')} - {moment(project.end_date).format('LL')} </p>\n          <p> {project.website} | {project.email}</p>\n          <p> {project.description} </p>\n          <Button\n            type=\"button\"\n            className=\"link-button\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => this.handleBackClick()}>\n            Back to Projects\n          </Button>\n          <Popup\n            trigger={\n              <Button\n                type=\"button\"\n                className=\"link-button\"\n                variant=\"contained\"\n                color=\"primary\">\n                Contribute\n              </Button>}\n            modal>\n            {close => (\n            <div className=\"popup\">\n                <h2>Are you sure you want to contribute to this project?</h2>\n                <div>\n                  <Button\n                    type=\"button\"\n                    className=\"link-button\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => { close(); }} >\n                    No\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    className=\"link-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => this.handleYesClick()}>\n                    Yes\n                  </Button>\n                </div>\n              </div>\n            )}\n          </Popup>\n        </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n  reduxStore\n})\n\nexport default connect(mapReduxStateToProps)(ProjectInfo);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport red from '@material-ui/core/colors/red'\nconst moment = require('moment');\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: orange,\n        secondary: red\n    }\n})\n\nclass Confirmation extends Component {\n    handleDashClick = () => {\n        // console.log('clicked YES');\n        this.props.history.push('/dashboard')\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n\n                <div className=\"confirmation\">\n                    <h2>You are now a contributor of this project!</h2>\n                    <Button\n                        type=\"button\"\n                        className=\"link-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => this.handleDashClick()} >\n                        Back to Dashboard\n                    </Button>\n                </div>\n            </ThemeProvider>\n        )\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default connect(mapReduxStateToProps)(Confirmation);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport orange from '@material-ui/core/colors/orange'\nimport red from '@material-ui/core/colors/red'\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: orange,\n        secondary: red\n    }\n})\n\nclass EditProfile extends Component {\n    state = {\n        id: this.props.reduxStore.user.id,\n        first_name: this.props.reduxStore.user.first_name,\n        last_name: this.props.reduxStore.user.last_name,\n        email: this.props.reduxStore.user.email,\n        city: this.props.reduxStore.user.city,\n        state: this.props.reduxStore.user.state,\n        occupation: this.props.reduxStore.user.occupation,\n        portfolio: this.props.reduxStore.user.portfolio,\n        time_available: this.props.reduxStore.user.time_available,\n        languages: this.props.reduxStore.user.languages,\n        qualifications: this.props.reduxStore.user.qualifications,\n    }\n\n    editProfile = (event, propertyValue) => {\n        //build a new object in state\n        // console.log('editing profile', this.state);\n        this.setState({\n            ...this.state,\n            [propertyValue]: event.target.value,\n        })\n    }\n\n    handleEdit = () => {\n        // dispatches edit to redux\n        console.log('clicking to submit edit', this.state);\n        this.props.dispatch({\n            type: 'SUBMIT_EDIT',\n            payload: this.state,\n            // url: `/api/edit_profile/${this.state.id}`\n        })\n        this.props.history.push(`/dashboard`)\n    }\n\n    handleCancel = () => {\n        this.props.history.push('/dashboard')\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <div className=\"content\">\n                    <h2>Edit Profile</h2>\n                    First Name:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.first_name}\n                        onChange={(event) => this.editProfile(event, 'first_name')}\n                    />\n                    <br />\n                    Last Name:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.last_name}\n                        onChange={(event) => this.editProfile(event, 'last_name')}\n                    />\n                    <br />\n                    Email:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.email}\n                        onChange={(event) => this.editProfile(event, 'email')}\n                    />\n                    <br />\n                    City:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.city}\n                        onChange={(event) => this.editProfile(event, 'city')}\n                    />\n                    <br />\n                    State:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.state}\n                        onChange={(event) => this.editProfile(event, 'state')}\n                    />\n                    <br />\n                    Job Title/Occupation:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.occupation}\n                        onChange={(event) => this.editProfile(event, 'occupation')}\n                    />\n                    <br />\n                    Github URL or another link to your portfolio:\n                    <br />\n                    <TextField\n                        id=\"standard-name\"\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        style={{ width: 300 }}\n                        value={this.state.portfolio}\n                        onChange={(event) => this.editProfile(event, 'portfolio')}\n                    />\n                    <br />\n                    How much time can you commit to a project?\n                    <br />\n                    <TextField\n                        multiline\n                        rows=\"4\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        style={{ width: 300 }}\n                        value={this.state.time_available}\n                        onChange={(event) => this.editProfile(event, 'time_available')}\n                    />\n                    <br />\n                    List your known programming languages:\n                    <br />\n                    <TextField\n                        multiline\n                        rows=\"4\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        style={{ width: 300 }}\n                        value={this.state.languages}\n                        onChange={(event) => this.editProfile(event, 'languages')}\n                    />\n                    <br />\n                    What qualifications do you have? Include degrees, certifications, courses, etc.\n                    <br />\n                    <TextField\n                        multiline\n                        rows=\"4\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        style={{ width: 300 }}\n                        value={this.state.qualifications}\n                        onChange={(event) => this.editProfile(event, 'qualifications')}\n                    />\n                    <br />\n                    <Button\n                        type=\"button\"\n                        className=\"link-button\"\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={this.handleCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        className=\"link-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={this.handleEdit}>\n                        Submit Changes\n                    </Button>\n                </div>\n            </ThemeProvider>\n        )\n    }\n}\n\nconst mapReduxStateToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default withRouter(connect(mapReduxStateToProps)(EditProfile));\n","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport HomePage from '../HomePage/HomePage';\nimport UserPage from '../UserPage/UserPage';\nimport AvailableProjects from '../AvailableProjects/AvailableProjects';\nimport ProjectInfo from '../ProjectInfo/ProjectInfo';\nimport Confirmation from '../Confirmation/Confirmation';\nimport EditProfile from '../EditProfile/EditProfile'\n\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n    \n\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/dashboard */}\n            <Redirect exact from=\"/\" to=\"/dashboard\" />\n            {/* Visiting localhost:3000/dashboard will show the dashboard page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/home\"\n              component={HomePage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/dashboard\"\n              component={UserPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/projects\"\n              component={AvailableProjects}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/project_info/:id\"\n              component={ProjectInfo}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/confirmation\"\n              component={Confirmation}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/edit_profile\"\n              component={EditProfile}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}